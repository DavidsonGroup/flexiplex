name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., v1.02.6)'
        required: true
        type: string

jobs:
  build:
    uses: ./.github/workflows/build.yaml

  release:
    name: Create Release Package
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Get release upload metadata
        id: metadata
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            RELEASE_URL=${{ github.event.release.upload_url }}
          else
            RELEASE_URL=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.release_version }} --jq '.upload_url')
          fi
          echo "upload_url=${RELEASE_URL}" >> $GITHUB_OUTPUT

          if [ "${{ github.event_name }}" = "release" ]; then
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.inputs.release_version }}" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ steps.vars.outputs.sha_short }}-centos-7
          path: ./linux-build

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ steps.vars.outputs.sha_short }}-macos
          path: ./macos-build

      - name: Extract and organize binaries
        run: |
          # Create bin directory
          mkdir -p ./bin
          
          # Extract Linux binary
          cd ./linux-build
          tar -xf result.tar
          mv flexiplex ../bin/flexiplex-linux
          cd ..
          
          # Extract macOS binary
          cd ./macos-build
          tar -xf result.tar
          mv flexiplex ../bin/flexiplex-macos
          cd ..
          
          # Clean up temporary directories
          rm -rf ./linux-build ./macos-build

      - name: Create release archive
        run: |
          # Create the archive with source code and binaries
          tar -czf "../flexiplex-bundled.tar.gz" \
            --exclude='.git' \
            --exclude='.github' \
            .

      - name: Upload to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.metadata.outputs.upload_url }}
          asset_path: ../flexiplex-bundled.tar.gz
          asset_name: flexiplex-${{ steps.metadata.outputs.version }}.tar.gz
          asset_content_type: application/gzip